name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump_command: 
        description: 'Type of semantic version bump, see the poetry documentation for more info: https://python-poetry.org/docs/cli/#version'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      create_release:
        description: 'Create a Github Release and Tag with the new version number'
        required: true
        type: boolean
      publish:
        description: 'Publish the new version to pypi'
        required: true
        type: boolean

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}  

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Bump version 
        id: bump-version
        run: |
          poetry version ${{ inputs.version_bump_command }}
          echo "NEW_VERSION=$( poetry version --short )" >> "$GITHUB_ENV"

      - name: Check Version
        id: check-version
        run: |
          [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> "$GITHUB_OUTPUT"
      
      - name: Commit the changes to pyproject.toml
        if: ${{ inputs.create_release }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: bump version to ${{ env.NEW_VERSION }} [skip-ci]"
          file_pattern: 'pyproject.toml'
  
      - name: Create and push tag
        if: ${{ inputs.create_release }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          default_bump: false
          default_prerelease_bump: false
          custom_tag: ${{ env.NEW_VERSION }} 

      - name: Build project for distribution
        run: |
          poetry build

      - name: Create Release
        if: ${{ inputs.create_release }}
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          skipIfReleaseExists: true
          draft: false
          allowUpdates: true
          generateReleaseNotes: false
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "dist/*"
          prerelease: steps.check-version.outputs.prerelease == 'true'

      - name: Publish to testPyPI
        if: ${{ inputs.publish }}
        env:
          TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_API_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi $TESTPYPI_TOKEN  
          poetry publish -r testpypi

      - name: Publish to Pypi
        if: ${{ inputs.publish }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish